pipeline {
    agent any

    // Define environment variables (optional)
    environment {
        STAGING_SERVER = 'staging-server-address'
        PRODUCTION_SERVER = 'production-server-address'
    }

    // Trigger the job to run every 5 minutes
    triggers {
        pollSCM('H/5 * * * *')
    }

    stages {
        stage('Build') {
            steps {
                script {
                    echo "Building the code..."
                    // Replace 'mvn clean install' with your build command (e.g., Maven or Gradle)
                    sh 'mvn clean install'
                }
            }
        }
        
        stage('Unit and Integration Tests') {
            steps {
                script {
                    echo "Running unit and integration tests..."
                    // Replace 'mvn test' with your test command
                    sh 'mvn test'
                }
            }
        }
        
        stage('Code Analysis') {
            steps {
                script {
                    echo "Performing code analysis..."
                    // Replace 'sonar-scanner' with your code analysis tool command (e.g., SonarQube)
                    sh 'sonar-scanner'
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                script {
                    echo "Performing security scan..."
                    // Replace 'dependency-check' with your security scanning tool command
                    sh 'dependency-check'
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    echo "Deploying to staging environment..."
                    // Replace with your deployment command for the staging server
                    sh "scp target/your-app.jar user@${STAGING_SERVER}:/path/to/deploy"
                }
            }
        }
        
        stage('Integration Tests on Staging') {
            steps {
                script {
                    echo "Running integration tests on staging environment..."
                    // Replace 'mvn integration-test' with your command to run tests on the staging server
                    sh 'mvn integration-test'
                }
            }
        }
        
        stage('Deploy to Production') {
            steps {
                script {
                    echo "Deploying to production environment..."
                    // Replace with your deployment command for the production server
                    sh "scp target/your-app.jar user@${PRODUCTION_SERVER}:/path/to/deploy"
                }
            }
        }
    }

    // Post actions, including email notifications for specific stages
    post {
        always {
            echo 'Pipeline completed.'
        }
        
        success {
            echo 'Build and deployment succeeded!'
        }

        failure {
            echo 'Build or deployment failed!'
        }
        
        // Send email notification after Test and Security Scan stages
        unstable {
            mail(to: 'woofwoofpoodle@gmail.com',
                 subject: "Jenkins Pipeline: ${currentBuild.fullDisplayName} - Unstable",
                 body: """Pipeline Stage: ${currentBuild.fullDisplayName} is unstable.
                 Logs: ${env.BUILD_URL}console""",
                 attachLog: true)
        }
        
        aborted {
            mail(to: 'woofwoofpoodle@gmail.com',
                 subject: "Jenkins Pipeline: ${currentBuild.fullDisplayName} - Aborted",
                 body: """Pipeline Stage: ${currentBuild.fullDisplayName} was aborted.
                 Logs: ${env.BUILD_URL}console""",
                 attachLog: true)
        }
        
        success {
            mail(to: 'woofwoofpoodle@gmail.com',
                 subject: "Jenkins Pipeline: ${currentBuild.fullDisplayName} - Success",
                 body: """Pipeline Stage: ${currentBuild.fullDisplayName} succeeded.
                 Logs: ${env.BUILD_URL}console""",
                 attachLog: true)
        }
    }
}
